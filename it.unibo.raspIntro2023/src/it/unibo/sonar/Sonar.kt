/* Generated by AN DISI Unibo */ 
package it.unibo.sonar

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Sonar ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 val simulate = true
		   lateinit var firstActorInPipe : ActorBasic 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						discardMessages = true
						CommUtils.outblack("sonar started")
						  if( simulate ) firstActorInPipe = sysUtil.getActor("sonarsimulator")!!  //generates simulated data
									//else firstActorInPipe = sysUtil.getActor("sonardatasource")!! 			//generates REAL data
						 			  
						 			//firstActorInPipe.
									//subscribe("datacleaner"). 		//removes 'wrong' data''
									//subscriber("datalogger").		    //logs (shows) the data generated by the sonar
						  			//subscribeLocalActor("sonar").				//handles sonarRobot but does not propagate ...
						 			//subscribe("distancefilter").		//propagates the lcoal stream event obstacle
						  			//subscribe("sonar")  
						  			subscribeToLocalActor("distancefilter").subscribeToLocalActor("sonarsimulator")
						  			 
						if(  simulate  
						 ){forward("simulatorstart", "simulatorstart(qasource)" ,"sonarsimulator" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="handleObstacle",cond=whenEvent("obstacle"))
					transition(edgeName="t01",targetState="handleEvent",cond=whenEvent("sonarRobot"))
				}	 
				state("handleObstacle") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("obstacle(V)"), Term.createTerm("obstacle(D)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val D = payloadArg(0); val DD = D.toInt()*10   
								CommUtils.outmagenta("obstacle distance $DD")
								emit("sonardata", "distance($DD)" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="handleObstacle",cond=whenEvent("obstacle"))
					transition(edgeName="t03",targetState="handleEvent",cond=whenEvent("sonarRobot"))
				}	 
				state("handleEvent") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handleEvent",cond=whenEvent("sonarRobot"))
					transition(edgeName="t05",targetState="handleEvent",cond=whenEvent("obstacle"))
				}	 
			}
		}
}
