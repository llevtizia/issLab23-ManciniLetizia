/* Generated by AN DISI Unibo */ 
package it.unibo.serviceaccessgui

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Serviceaccessgui ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("serviceaccessgui START")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitRequest", cond=doswitch() )
				}	 
				state("waitRequest") { //this:State
					action { //it:State
						 CommUtils.waitTheUser("$name wait request .... Please HIT ")  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="handleRequest", cond=doswitch() )
				}	 
				state("handleRequest") { //this:State
					action { //it:State
						CommUtils.outblue("serviceaccessgui handle request")
						request("ticket", "ticket(100)" ,"coldstorageservice" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="requestAccepted",cond=whenReply("ticketdone"))
					transition(edgeName="t01",targetState="requestRefused",cond=whenReply("ticketfailed"))
				}	 
				state("requestRefused") { //this:State
					action { //it:State
						CommUtils.outblue("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("ticketfailed(_)"), Term.createTerm("ticketfailed(KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblue("not enough space in the cold room ...")
						}
						if( checkMsgContent( Term.createTerm("ticketnotok(TIME)"), Term.createTerm("ticketnotok(_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblue("too much time passed ...")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitRequest", cond=doswitch() )
				}	 
				state("requestAccepted") { //this:State
					action { //it:State
						CommUtils.outblue("serviceaccessgui request accepted. going to the indoor port next")
						if( checkMsgContent( Term.createTerm("ticketdone(CODE,TICKETTIME)"), Term.createTerm("ticketdone(CODE,TICKETTIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val Code = payloadArg(0)
												val TicketTime = payloadArg(1) 
												CommUtils.outblue("code: ${Code}, time for unloading: ${TicketTime} "); 
								request("validateticket", "validateticket($Code,$TicketTime)" ,"coldstorageservice" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="unloading",cond=whenReply("ticketok"))
					transition(edgeName="t03",targetState="requestRefused",cond=whenReply("ticketnotok"))
				}	 
				state("unloading") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ticketok(TIME)"), Term.createTerm("ticketok(TIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblue("charge taken. leave the INDOOR area ... ")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="waitRequest",cond=whenDispatch("chargeTaken"))
				}	 
			}
		}
}
