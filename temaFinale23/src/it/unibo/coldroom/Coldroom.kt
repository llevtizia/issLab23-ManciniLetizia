/* Generated by AN DISI Unibo */ 
package it.unibo.coldroom

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Coldroom ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 
				var CapacityFridge 	= 1000.0
				var updateStatus 	= false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outmagenta("coldroom | START")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitRequest", cond=doswitch() )
				}	 
				state("waitRequest") { //this:State
					action { //it:State
						CommUtils.outmagenta("coldroom | waiting for requests  ")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="handleRequest",cond=whenRequest("store"))
				}	 
				state("handleRequest") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("store(KG)"), Term.createTerm("store(KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												var Weight = payloadArg(0).toFloat()
												CommUtils.outmagenta("coldroom | request to store ${Weight} kg   ")
												
												var SpaceLeft = (CapacityFridge - Weight).toFloat()
												if ( SpaceLeft > 0 ) {
													updateStatus = true
								answer("store", "enoughspace", "enoughspace($SpaceLeft)"   )  
								
												} else
								answer("store", "notenoughspace", "notenoughspace($SpaceLeft)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="updateStatus", cond=doswitch() )
				}	 
				state("updateStatus") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("store(KG)"), Term.createTerm("store(KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
											 	if ( updateStatus ) {
											 		
											 		var Weight = payloadArg(0).toFloat()
											 		CapacityFridge = ( CapacityFridge - Weight ).toDouble()		
											 	}
											 	CommUtils.outmagenta("coldroom | free space left: ${CapacityFridge}   "); 	
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitRequest", cond=doswitch() )
				}	 
			}
		}
}
