/* Generated by AN DISI Unibo */ 
package it.unibo.coldstorageservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Coldstorageservice ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		 
				var Weight 		= 0 
				var StartTime = 0L
		        var Elapsed   = 0L
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("coldstorageservice START")
						discardMessages = false
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitRequest", cond=doswitch() )
				}	 
				state("waitRequest") { //this:State
					action { //it:State
						CommUtils.outgreen("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="handleRequest",cond=whenRequest("ticket"))
					transition(edgeName="t012",targetState="validate",cond=whenRequest("validateticket"))
				}	 
				state("handleRequest") { //this:State
					action { //it:State
						CommUtils.outgreen("coldstorageservice handle request")
						if( checkMsgContent( Term.createTerm("ticket(KG)"), Term.createTerm("ticket(KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												var Weight = payloadArg(0)
												CommUtils.outgreen("weight of the charge: ${Weight}")
								request("store", "store($Weight)" ,"coldroom" )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t013",targetState="requestAccepted",cond=whenReply("enoughspace"))
					transition(edgeName="t014",targetState="requestRefused",cond=whenReply("notenoughspace"))
				}	 
				state("requestRefused") { //this:State
					action { //it:State
						CommUtils.outgreen("coldstorageservice request refused")
						if( checkMsgContent( Term.createTerm("notenoughspace(KG)"), Term.createTerm("notenoughspace(KG)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								
												var SpaceLeft = payloadArg(0)
												CommUtils.outgreen("not enough space: ${ SpaceLeft }"); 	
								answer("ticket", "ticketfailed", "ticketfailed($SpaceLeft)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitRequest", cond=doswitch() )
				}	 
				state("requestAccepted") { //this:State
					action { //it:State
						CommUtils.outgreen("coldstorageservice request accepted")
						
									var TicketCode = "ticketcod3"
									var TicketTime = 10000.0
						answer("ticket", "ticketdone", "ticketdone($TicketCode,$TicketTime)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitRequest", cond=doswitch() )
				}	 
				state("validate") { //this:State
					action { //it:State
						CommUtils.outgreen("coldstorageservice check if ticket is valid ")
						if( checkMsgContent( Term.createTerm("validateticket(CODE,TICKETTIME)"), Term.createTerm("validateticket(CODE,TICKETTIME)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
												val Code = payloadArg(0)
												val TicketTime = payloadArg(1)
								CommUtils.outgreen("check if the ticket with code: ${Code}, time : ${TicketTime} is valid   ")
								
												var TimeLeft = 10
								      			
								answer("validateticket", "ticketok", "ticketok($TimeLeft)"   )  
								request("gomoveToIndoor", "gomoveToIndoor(_)" ,"transporttrolley" )  
						}
						if( checkMsgContent( Term.createTerm("chargeTaken(_)"), Term.createTerm("chargeTaken(_)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outgreen("coldstorageservice charge taken by the robot.")
								forward("chargeTaken", "chargeTaken(_)" ,"serviceaccessgui" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t015",targetState="waitRequest",cond=whenDispatch("chargeTaken"))
				}	 
			}
		}
}
