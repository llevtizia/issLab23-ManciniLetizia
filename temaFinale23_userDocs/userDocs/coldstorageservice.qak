/* 
 * ================================================================================
 * cold storage service
 * ================================================================================
 */  
   
System coldstorageservice 
  
// messaggi per il basic robot
// --------------------------------------------------------------------------------
 
Request engage        	: engage( OWNER, STEPTIME )	
Reply   engagedone    	: engagedone( ARG )
Reply   engagerefused 	: engagerefused( ARG )

Dispatch disengage    	: disengage( ARG )
//Dispatch engaged      : engaged(ARG)
//Dispatch disengaged   : disengage(ARG)

Dispatch cmd       		: cmd( MOVE )      
Dispatch end       		: end( ARG )   

Request step       		: step( TIME )	
Reply stepdone     		: stepdone( V )  
Reply stepfailed   		: stepfailed( DURATION, CAUSE )

Request  doplan   		: doplan( PATH, OWNER, STEPTIME )
Reply doplandone  		: doplandone( ARG ) 
Reply doplanfailed  	: doplanfailed( ARG )

//Endosimbiosi di robotpos
Request moverobot    	:  moverobot( TARGETX, TARGETY )
Reply moverobotdone  	:  moverobotok( ARG )
Reply moverobotfailed	:  moverobotfailed( PLANDONE, PLANTODO )

Dispatch setrobotstate	: setpos( X,Y,D )
Dispatch setdirection	: dir( D )
//Dispatch setsteptime:setsteptime(T)

Request getrobotstate	: getrobotstate( ARG )
Reply robotstate		: robotstate( POS, DIR )
// --------------------------------------------------------------------------------

// messaggi applicativi
// --------------------------------------------------------------------------------
Request gomoveToIndoor	: gomoveToIndoor(_)
Reply indoorok			: indoorok(_)
Reply indoornotok		: indoornotok(_)
Dispatch chargeTaken	: chargeTaken(_)

// messaggi service access gui
// --------------------------------------------------------------------------------
Request ticket			: ticket( KG )
Reply ticketdone		: ticketdone( CODE, TICKETTIME )
Reply ticketfailed		: ticketfailed(_)

Request validateticket	: validateticket( CODE, TICKETTIME )
Reply ticketok			: ticketok( TIME )
Reply ticketnotok		: ticketnotok( TIME )



// messaggi fridge
// --------------------------------------------------------------------------------
Request store			: store( KG )
Reply enoughspace		: enoughspace( KG )
Reply notenoughspace	: notenoughspace( KG )  


Context ctxcoldstorageservice ip [ host="localhost" port=9990 ]
Context ctxbasicrobot ip [ host="127.0.0.1" port=8020 ]

// actors
ExternalQActor basicrobot context ctxbasicrobot


// service access gui
QActor serviceaccessgui context ctxcoldstorageservice {
	// initial ----------------------------------------------------------------------- 
	State s0 initial {
		println("serviceaccessgui START") color blue
	}
	Goto waitRequest
	
	
	// wait request ------------------------------------------------------------------
	State waitRequest {
		// wait for the request
		[# CommUtils.waitTheUser("$name wait request .... Please HIT ") #]
	}
 	Goto handleRequest
	
	
	// handle request ----------------------------------------------------------------
	State handleRequest {
		println("serviceaccessgui handle request") color blue
		
		// request the ticket to the service
		request coldstorageservice -m ticket : ticket( 100 ) //input kg 
		
	}
	Transition t0 	whenReply ticketdone -> requestAccepted
					whenReply ticketfailed -> requestRefused
	
	
	// request refused ---------------------------------------------------------------
	State requestRefused {
		printCurrentMessage color blue
		onMsg( ticketfailed : ticketfailed( KG )){
			println("not enough space in the cold room ...") color blue
		}
		
		onMsg( ticketnotok : ticketnotok(_)){
			println("too much time passed ...") color blue
		}	
	}
	Goto waitRequest
	
	
	// request accepted --------------------------------------------------------------
	State requestAccepted {
		println("serviceaccessgui request accepted. going to the indoor port next") color blue
		onMsg( ticketdone : ticketdone( CODE, TICKETTIME )){
			[# 
				val Code = payloadArg(0)
				val TicketTime = payloadArg(1) 
				CommUtils.outblue("code: ${Code}, time for unloading: ${TicketTime} "); 
			#]
			// send second request (ticket number)
			request coldstorageservice -m validateticket : validateticket( $Code, $TicketTime ) //kg 
		}
	}
	Transition t0 	whenReply ticketok -> unloading
					whenReply ticketnotok -> requestRefused
					
	State unloading {
		onMsg( ticketok : ticketok( TIME ) ) {
			println("charge taken. leave the INDOOR area ... ") color blue
		}
	}
	Transition t0 whenMsg chargeTaken -> waitRequest 
}


// coldroom (fridge)

QActor coldroom context ctxcoldstorageservice {
	
	[# 
		var CapacityFridge 	= 1000.0
		var updateStatus 	= false
	#]
	
	State s0 initial {
		println("coldroom | START") color magenta
	}
	Goto waitRequest
	
	
	State waitRequest {
		println("coldroom | waiting for requests  ") color magenta
	}
	Transition t0 whenRequest store -> handleRequest
	
	
	State handleRequest {
		printCurrentMessage color magenta
		
		onMsg( store : store( KG ) ) {
			[# 
				var Weight = payloadArg(0).toFloat()
				CommUtils.outmagenta("coldroom | request to store ${Weight} kg   ")
				
				var SpaceLeft = (CapacityFridge - Weight).toFloat()
				if ( SpaceLeft > 0 ) {
					updateStatus = true
			#]
					replyTo store with enoughspace : enoughspace( $SpaceLeft )
			[#
				} else
			#]
					replyTo store with notenoughspace : notenoughspace( $SpaceLeft )		
					
		}
	}
	Goto updateStatus 
	
	
	State updateStatus {
		printCurrentMessage color magenta
		
		onMsg( store : store( KG ) ) {
			 [#
			 	if ( updateStatus ) {
			 		
			 		var Weight = payloadArg(0).toFloat()
			 		CapacityFridge = ( CapacityFridge - Weight ).toDouble()		
			 	}
			 	CommUtils.outmagenta("coldroom | free space left: ${CapacityFridge}   "); 	
			 #]
			 
		}
	}
	Goto waitRequest
}



// trolley
QActor transporttrolley context ctxcoldstorageservice {
	
	State s0 initial {
		println("$name START, engage basicrobot ") color yellow
		// request basicrobot -m engage : engage( transporttrolley, 330 )
	}
	//Transition t0 whenReply engagedone -> waitCmd
	Goto waitCmd
	
	
	State waitCmd {
		println("$name | waiting for commands ...	") color yellow
		updateResource [# "$name(waiting) " #]
		
	}
	Transition t0 whenRequest gomoveToIndoor -> moveToIndoor
	
	
	State moveToIndoor {
		println("$name moveToIndoor ") color yellow 
		request basicrobot -m moverobot : moverobot( 0, 4 )
	}
	Transition t0 	whenReply moverobotdone -> loadTheCharge
					whenReply moverobotfailed -> failedMovement
					
	State failedMovement {
		println("robot not moving ") color yellow 
	}
	Goto waitCmd
	
	
	State loadTheCharge {
		updateResource [# "$name(loading) " #]
		println("$name loading charge ... ") color yellow
		//delay 2000
		//[# CommUtils.waitTheUser("$name loading charge. Please HIT ") #]
		forward coldstorageservice -m chargeTaken : chargeTaken(_)
	}
	Goto moveToColdRoom
	 
	
	State moveToColdRoom {
		println("$name moveToColdRoom") color yellow
		request basicrobot -m moverobot : moverobot( 4, 3 )
		delay 2000
	}
	Transition t0 whenReply moverobotdone -> storeTheCharge
	
	 
	State storeTheCharge {
		updateResource [# "$name(storing) " #]
		println("$name storing charge ... ") color yellow
		delay 2000
		[# CommUtils.waitTheUser("$name loading charge. Please HIT ") #]
	}
	Goto moveToHome
	  
	  
	State moveToHome {
		println("$name moveToHome ") color green
		request basicrobot -m moverobot : moverobot( 0, 0 )
	} 
	Transition t0 whenReply moverobotdone -> trolleyAtHome
	
	
	State trolleyAtHome {
		println("$name trolley at home ") color green
		forward basicrobot -m setdirection : dir( down )
		updateResource [# "$name(athome) " #]
		delay 2000 // to avoid interruption
		forward basicrobot -m disengage : disengage( transporttrolley )
		delay 1000
		[# System.exit(0) #]
	} 
}





QActor coldstorageservice context ctxcoldstorageservice {
	
	[# 
		var Weight 		= 0 
		var StartTime = 0L
        var Elapsed   = 0L
	#]
	
	State s0 initial {
		println("coldstorageservice START") color green
		discardMsg Off 
		//memoCurrentTime StartTime
	}
	Goto waitRequest
	 
	
	State waitRequest {
		printCurrentMessage color green
	}
	Transition t0 	whenRequest ticket -> handleRequest
					whenRequest validateticket -> validate
	 
	  
	State handleRequest {
		println("coldstorageservice handle request") color green
		// first request
		onMsg( ticket : ticket( KG )){ 
			[# 
				var Weight = payloadArg(0)
				CommUtils.outgreen("weight of the charge: ${Weight}")
			#]
			// send request to the cold room to check if there's space
			request coldroom -m store : store( $Weight ) //kg 
		}
		//replyTo ticket with ticketdone : ticketdone( 123456, 1000 )
	}
	//Goto waitRequest
	Transition t0 	whenReply enoughspace -> requestAccepted
					whenReply notenoughspace -> requestRefused
					
					
	State requestRefused {
		println("coldstorageservice request refused") color green
		
		onMsg( notenoughspace : notenoughspace( KG ) ) {
			[#
				var SpaceLeft = payloadArg(0)
				CommUtils.outgreen("not enough space: ${ SpaceLeft }"); 	
			#]
			replyTo ticket with ticketfailed : ticketfailed( $SpaceLeft )
		}
	}
	Goto waitRequest
					
					
	State requestAccepted {
		println("coldstorageservice request accepted") color green
		
		[#
			var TicketCode = "ticketcod3"
			var TicketTime = 10000.0
		#]
		replyTo ticket with ticketdone : ticketdone( $TicketCode, $TicketTime )
	}
	Goto waitRequest 
	 
	 
	State validate {
		println("coldstorageservice check if ticket is valid ") color green
		// first request
		onMsg( validateticket : validateticket( CODE, TICKETTIME )){
			[# 
				val Code = payloadArg(0)
				val TicketTime = payloadArg(1)
			#] 
				println("check if the ticket with code: ${Code}, time : ${TicketTime} is valid   ") color green
			
			// check time difference
			[#
				var TimeLeft = 10
      			
      		#]
				replyTo validateticket with ticketok : ticketok( $TimeLeft )
				request transporttrolley -m gomoveToIndoor : gomoveToIndoor(_)
			/* 			
      		[#	 
      			} else	
			#]
				replyTo validateticket with ticketnotok : ticketnotok( $TimeLeft )
			*/
		}
		onMsg( chargeTaken : chargeTaken( _ )) {
			println("coldstorageservice charge taken by the robot.") color green
			forward serviceaccessgui -m chargeTaken : chargeTaken(_)
		}
	}
	Transition t0 whenMsg chargeTaken -> waitRequest
}








