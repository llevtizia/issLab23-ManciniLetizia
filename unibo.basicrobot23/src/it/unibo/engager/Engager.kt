/* Generated by AN DISI Unibo */ 
package it.unibo.engager

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
	
class Engager ( name: String, scope: CoroutineScope  ) : ActorBasicFsm( name, scope ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		val interruptedStateTransitions = mutableListOf<Transition>()
		     
		  var Owner = "unkknown"
		  var curConn : Interaction? = null 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="engageAccept",cond=whenRequest("engage"))
					transition(edgeName="t01",targetState="handleEvent",cond=whenEvent("sonardata"))
				}	 
				state("handleEngage") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						answer("engage", "engagedone", "engagedone(ok)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("engageRefuse") { //this:State
					action { //it:State
						 CommUtils.outmagenta("engagerefused since working for by $Owner" )  
						answer("engage", "engagerefused", "engagerefused($Owner)"   )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("engageAccept") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("engage(ARG)"), Term.createTerm("engage(OWNER)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 if( currentMsg.conn != null ) curConn = currentMsg.conn					
												   Owner  = payloadArg(0)
												   if( curConn != null )
												   CommUtils.outmagenta("engager | engaged by remote $Owner  on $curConn" )		
												   else 		   
												   CommUtils.outmagenta("engager | engaged by local $Owner = ${payloadArg(0)} " )	
								answer("engage", "engagedone", "engagedone($Owner)"   )  
								forward("engaged", "engaged($Owner)" ,"basicrobot" ) 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="s0", cond=doswitch() )
				}	 
				state("handleEvent") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						 CommUtils.outcyan("handleEvent $currentMsg") 
								   //val Data = currentMsg.msgContent()
								   val info = currentMsg.toString()
								   if( curConn != null ) CommUtils.forwardOnInterconn(curConn,info) //invio l'evento al caller'
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="handleEvent",cond=whenEvent("sonardata"))
					transition(edgeName="t03",targetState="handleEvent",cond=whenEvent("obstacle"))
				}	 
			}
		}
}
