/* 
 * ================================================================================
 * unibo.basicrobot23
 * ================================================================================
 */  
   
System /* -trace -msglog  */ basicrobot23    
  
Dispatch cmd       	: cmd(MOVE)      
Dispatch end       	: end(ARG)   

Request step       : step(TIME)	
Reply stepdone     : stepdone(V)  
Reply stepfailed   : stepfailed(DURATION, CAUSE)	

Event  sonardata   : sonar( DISTANCE ) 	  //percepito da sonarobs/engager   
Event obstacle     : obstacle(X) 

Request  doplan   : doplan( PATH, OWNER, STEPTIME )
Reply doplandone  : doplandone( ARG ) 
Reply doplanfailed  : doplanfailed( ARG )

Dispatch setrobotstate: setpos(X,Y,D)
//Dispatch setsteptime:setsteptime(T)

Request engage        : engage(OWNER)	
Reply   engagedone    : engagedone(ARG)
Reply   engagerefused : engagerefused(ARG)

Dispatch disengage    : disengage(ARG)
Dispatch engaged      : engaged(ARG)
Dispatch disengaged   : disengage(ARG)

Event alarm           : alarm(X)
Dispatch nextmove     : nextmove(M)
Dispatch nomoremove   : nomoremove(M)

//Endosimbiosi di robotpos
Request moverobot    :  moverobot(TARGETX, TARGETY)
Reply moverobotdone  :  moverobotok(ARG)
Reply moverobotfailed:  moverobotfailed(PLANDONE, PLANTODO)

Context ctxbasicrobot ip [host="localhost" port=8020]  

//CodedQActor datacleaner    context ctxbasicrobot className "rx.dataCleaner"
//CodedQActor distancefilter context ctxbasicrobot className "rx.distanceFilter"

/* 
 * ------------------------------
 * engager 
 * ------------------------------
 */ 
QActor engager context ctxbasicrobot{
[#     
  var Owner = "unkknown"
  var curConn : Interaction? = null 
#]  	
	State s0 initial { 	  
		//printCurrentMessage color magenta
		if [# ! currentMsg.isEvent() #]{ println("$name waiting ..")   }
	}
	Transition t0 whenRequest engage -> engageAccept
		          whenMsg disengage ->  disengageRobot
	              //whenEvent sonardata -> handleEvent
	              //whenEvent obstacle  -> handleEvent
     			   
    State handleEngage{
    	printCurrentMessage 
    	replyTo engage with engagedone : engagedone(ok)    	
    }
    State disengageRobot{
    	printCurrentMessage 
     	[# Owner  = "unkknown" #]
    	forward basicrobot -m disengaged : disengaged($Owner)
    	//forward planexec   -m disengaged : disengaged($Owner)
    	emitlocalstream alarm : alarm(disengaged)
    }
    Goto s0 
    
    State engageRefuse{
    	println("$name engage refused since already working for $Owner") 
     	replyTo engage with engagerefused : engagerefused($Owner)
    }
    Goto s0  
      
    State engageAccept{	
    	printCurrentMessage 
			onMsg( engage : engage(OWNER) ) {
				[# if( currentMsg.conn != null ) curConn = currentMsg.conn					
				   Owner  = payloadArg(0)
				   if( curConn != null )
				   CommUtils.outmagenta("engager | engaged by remote $Owner  on $curConn" )		
				   else 		   
				   CommUtils.outmagenta("engager | engaged by local $Owner = ${payloadArg(0)} " )	
				#]
				updateResource [# "workingfor($Owner)" #] 			
				replyTo engage with engagedone : engagedone($Owner)
				forward basicrobot    -m engaged : engaged($Owner)				 
			}
	} 
	Goto s0
	 
	State handleEvent{
		printCurrentMessage
		[# CommUtils.outcyan("handleEvent $currentMsg") 
		   //val Data = currentMsg.msgContent()
		   val info = currentMsg.toString()
		   if( curConn != null ) CommUtils.forwardOnInterconn(curConn,info) //invio l'evento al caller'
		#]
 	}
 	Goto s0
}

/*
 * ------------------------------
 * basicrobot
 * ------------------------------
 */ 
QActor basicrobot context ctxbasicrobot{
[#  
  var StepTime      = 0L
  var StartTime     = 0L     
  var Duration      = 0L   
  var RobotType     = "" 
  var CurrentMove   = "unkknown"
  var StepSynchRes  = false
  var Owner         = "unkknown"
  //val planner       = unibo.planner23.Planner23Util() 
  
  fun checkOwner() : Boolean {
  	if( currentMsg.isEvent()  ) return true
  	CommUtils.outblue("checkOwner $Owner ${currentMsg}")
  	return ( currentMsg.msgSender() == Owner) 
  }
#]      
 	State ss0 initial { 	
 		printCurrentMessage       
 		discardMsg On  //In the intial phase ...
 		
 		delegate "engage" to engager
 		delegate "disengage" to engager
 		delegate "doplan" to planexec
 		delegate "setrobotstate" to robotposendosimbiotico
 		delegate "moverobot" to robotposendosimbiotico
  		
 		//[# unibo.comm22.utils.CommSystemConfig.tracing = false #]  //tracing at unibo.comm22 level
 		delay 1000  //per inserzione in docker
		println("basicrobot | STARTING ... ")	
		//[# sysUtil.trace = true #]  //Trace the behavior of ActorBasic
 		qrun uniborobots.robotSupport.create(myself,"basicrobotConfig.json")	 		
 		[# RobotType = uniborobots.robotSupport.robotKind #]  
 		delay 2000 //per inserzione in docker
  		run uniborobots.robotSupport.move( "a" )    //synch
 		run uniborobots.robotSupport.move( "d" )	//synch
        updateResource [# "basicrobot(started)" #]
  		delay 1000 //per inserzione in docker
 	}  
	Goto waitForOwner  
 	
 	State waitForOwner{
 		//Put robot in HOME ...
 		println("basicrobot  | Waiting engage request ...  ")  
 	}
 	Transition t0 whenMsg engaged -> work
  	
	State work{ 
		printCurrentMessage   
		discardMsg Off //We want store the non-handled messages
		onMsg( engaged : engaged(OWNER)){
			[# Owner  = payloadArg(0) #]
		}
		println("basicrobot  | waiting, working for $Owner ... ")  
	} 
	Transition t0   whenRequest  step      -> doStep		
					whenMsg     cmd        -> execcmd
				  	whenMsg     end        -> endwork			  
	                whenMsg     disengaged -> waitForOwner
	                whenMsg     engaged    -> work  //repetita ...
	
	State execcmd{
		printCurrentMessage
		if [#   checkOwner() #] {   
			onMsg( cmd : cmd(MOVE) ){
	  			//activate the motors  
	  			[# CurrentMove = payloadArg(0) #] 
				run uniborobots.robotSupport.move( payloadArg(0 ) )
				updateResource [# "moveactivated(${payloadArg(0)})" #]
			}
		}
	 }
	 Goto work   
  
	
   	State doStep{ 
 		printCurrentMessage  
		onMsg( step : step( T ) ){  
			[#	StepTime     = payloadArg(0).toLong()  	#]    
			updateResource [# "step(${StepTime})" #]
  		}  
        println("basicrobot | doing doStep StepTime=$StepTime  ")        
        memoCurrentTime StartTime  
        [# StepSynchRes = uniborobots.robotSupport.dostep( StepTime ) #]   
	}  	
	Goto stepok if [# StepSynchRes #] else stepKo 
 
     	 
	State stepok{   
		printCurrentMessage
 		run uniborobots.robotSupport.move( "h" )  //stop the (real) robot 
		updateResource [# "stepDone($StepTime)" #]
   		//emit info : info( stepdone($StepTime) )
   		replyTo step with stepdone : stepdone($StepTime)
		println("basicrobot | stepDone reply done")
  	}
	Goto work  
 
	State stepKo{  	 	
		setDuration Duration from StartTime
		printCurrentMessage
		run uniborobots.robotSupport.move( "h" )  //stop the (real) robot
		[# var TunedDuration   = StepTime - ((Duration * 0.80)).toLong()   #]
		println("basicrobot | stepKo $StepTime  duration=$Duration  TunedDuration=$TunedDuration") color magenta
		if [# TunedDuration > 30 #]{
			run uniborobots.robotSupport.move( "s" )
			delayVar TunedDuration 
			run uniborobots.robotSupport.move( "h" ) 
	 		updateResource [# "stepFail($Duration)" #] 
	 		delay 300
		}
	 	replyTo step with stepfailed : stepfailed($Duration, obst)
    } 
	Goto work 

					
	State endwork{ 
		printCurrentMessage
		updateResource [# "basicrobot(end)" #]	 		
 		//terminate 1
	}   
   
} 
  
/*
 * ------------------------------
 * planexec
 * ------------------------------
 */
QActor planexec context ctxbasicrobot{
	[#  var Plan          = ""
		var PlanOrig      = ""
		var CurMoveTodo   = ""		
		var StepTime      = 345L
		var Owner         = "unknown"
   	#]
	State s0 initial{
		subscribeTo engager 
	}
	Goto work

	State work{
		//println("planexec | waiting ...")  
	}
	Transition t0 whenRequest doplan -> execplan

	State execplan{
		printCurrentMessage color red
		onMsg( doplan : doplan(PLAN, OWNER, STEPTIME)){
		    println("$name | ${payloadArg(0)}") 
			[#  Plan     = payloadArg(0).replace("[","").replace("]","").replace(",","").replace(" ","")
				PlanOrig = Plan
				Owner    = payloadArg(1)
				StepTime = payloadArg(2).toLong()
			 #]
			 println("$name | Plan=$Plan StepTime=$StepTime") 
		} 
	}  
	Transition t0 
		whenTime 100    -> nextMove
		whenEvent alarm -> planinterruptedalarm
	  
	
	State nextMove{ 
		[# 
		   if( Plan.length > 0  ){
		   	CurMoveTodo =  Plan.elementAt(0).toString() 
		   	Plan        =  Plan.removePrefix(CurMoveTodo)
		   }else CurMoveTodo = ""		   
		#]
		println("$name | CurMoveTodo= $CurMoveTodo remain:$Plan" ) 
		forward planexec -m nextmove : nextmove($CurMoveTodo)
	} 	 
	Transition t0  whenEvent alarm   -> planinterruptedalarm
		           whenMsg nextmove  -> doMove
	
	State doMove{
		println("$name | domove $CurMoveTodo")  
 		if [# CurMoveTodo == "" #] { 
 			forward planexec -m nomoremove : nomoremove(end)
 		}
		else{ if [# CurMoveTodo == "w" #] {
	 			delay 300  //avoid too fast ...
	 			//Il supporto non fa step-back
	 			//Chiedo di fare step 
	 			//[# StepSynchRes = uniborobots.robotSupport.dostep( StepTime ) #]
	 			request basicrobot -m step : step($StepTime)	//mentre fa doplan ...		
			}else{
				println("doMoveTurn $CurMoveTodo")  
				run uniborobots.robotSupport.move(  CurMoveTodo )
				forward planexec -m nextmove : nextmove(goon)
			}
			//forward planexec -m nextmove : nextmove(goon)
		}
 	}
	//Goto doMoveW if [# CurMoveTodo == "w" #] else doMoveTurn
	Transition t0  whenEvent alarm     -> planinterruptedalarm
	               whenMsg nomoremove  -> planend
	               whenMsg nextmove    -> nextMove 
	               //whenMsg nextmove  and [# ! StepSynchRes #] -> pathinterrupted 
	               whenReply stepdone   -> nextMove 
	               whenReply stepfailed -> planinterruptedobstacle

 	
	State planend{ 
		printCurrentMessage color red
		if [# currentMsg.msgContent() == "alarm(disengaged)" #]{}
		else{ 
			if [# currentMsg.msgId() == "alarm" #]{
		 		println("planend alarm $Plan $CurMoveTodo")	 
		 		[# val Plantodo = CurMoveTodo + Plan #]
		 		replyTo doplan with doplanfailed : doplanfailed( $Plantodo )			
			}else{ 
				println("planend ok $Plan ") 
				//if [# StepSynchRes #]{ 
					replyTo doplan with doplandone : doplandone($PlanOrig)
					updateResource [# "plandone($PlanOrig)" #] 
				//}
				/* 
				else{ 
					[# var Pathtodo = CurMoveTodo + Plan 
					   if( Pathtodo.length == 0 ) Pathtodo="n"
					#]
					println("pathend Pathtodo=$Pathtodo ")	
					replyTo doplan with doplanfailed : doplanfailed( $Pathtodo )
				}*/
			}
		}
	}
	Goto work
	
	State planinterruptedobstacle{  
		//printCurrentMessage
 		println("planinterruptedobstacle $CurMoveTodo ")	color magenta
 		[# var Plantodo =  CurMoveTodo + Plan
 		#]
 		updateResource [# "planfailed($Plan,$Plantodo )" #] 
 		replyTo doplan with doplanfailed : doplanfailed( $Plantodo )
 	}	
 	Goto work 
 	
 	State planinterruptedalarm{  
		//printCurrentMessage
 		println("planinterruptedalarm $CurMoveTodo ")	color magenta
 		[# var Plantodo = CurMoveTodo + Plan
 		#]
 		updateResource [# "planfailed($PlanOrig,$Plantodo )" #] 
 		replyTo doplan with doplanfailed : doplanfailed( $Plantodo )
 	}	
 	Goto work 
 	
}

/*
 * ------------------------------
 * robotposendosimbiotico
 * ------------------------------
 */

QActor robotposendosimbiotico context ctxbasicrobot{
	[# val planner = unibo.planner23.Planner23Util()
	    //val MapName = "mapEmpty23"
	    val MapName = "mapCompleteWithObst23ok"
	    val MyName    = name //upcase var
	    val StepTime  = 330
		var Plan      = ""	
		var TargetX   = ""
		var TargetY   = ""
	#]
	State s0 initial{
        println("$name STARTS loading $MapName") 
		[# planner.initAI()  
		   planner.loadRoomMap(MapName) 
		   planner.showMap()
		#]
	}
	Goto waitclientrequest
 		              
	State waitclientrequest{
		println("$name | waiting the client request...")
	}              
	Transition t0 //whenTime 5000        ->  endofwork  //no more needed
	              whenRequest moverobot -> elabClientRequest
				  whenMsg setrobotstate -> setTheRobotState
				  
	State setTheRobotState{
		onMsg(setrobotstate : setpos(X,Y,D)){
			[# val X = payloadArg(0)
			   val Y = payloadArg(1)
			   val D = payloadArg(2)
			   planner.setRobotState(X,Y,D) 
			#]
		    println("setTheRobotState ($X, $Y, $D) ") color magenta
		    [# planner.showCurrentRobotState(); #]
		}		 
		delay 300  //Give time to the webpage ...
		println("update resource for setTheRobotState") color magenta  
		updateResource [# planner.robotOnMap() #] 
	} 
	//Transition t0 whenRequest moverobot -> elabClientRequest
	Goto waitclientrequest
	
	State elabClientRequest{
		printCurrentMessage 
		onMsg( moverobot : moverobot(X,Y)){
			[# TargetX = payloadArg(0)
			   TargetY = payloadArg(1)
		    #]
		}
	}
	Goto planTheRobotmoves
	
	
	/* 
	 * Uso il planner per gestire il robot
	*/
	State planTheRobotmoves{
		printCurrentMessage 
		[#  
		   Plan = planner.planForGoal(""+TargetX,""+TargetY).toString()
		   println(Plan)
		   Plan = planner.planCompacted(Plan) 
		   if( Plan.isEmpty()) Plan="''"
		   //CommUtils.outblue("$name | Plan to reach pos: $Plan")
		#]
		println("$name | Plan to reach pos: $Plan") 
		//chiedo al basicrobot di eseguire  Plan
		request basicrobot -m doplan : doplan($Plan, worker, $StepTime)
	}
	Transition t0 whenReply doplandone   -> endok
	              whenReply doplanfailed -> endko
	
	State endok{
		println("pos reached") 
		//Aggiorno il path sulla mappa
		[# planner.doPathOnMap(Plan) #]
		[# planner.showCurrentRobotState(); #]
		updateResource [# planner.robotOnMap() #] 
		replyTo moverobot with moverobotdone : moverobotdone(ok)
	}
	Goto waitclientrequest
	//Goto endofwork
	
	State endko{
		onMsg( doplanfailed : doplanfailed(ARG) ){
			[# val PathTodo = payloadArg(0) #]
			println("pos NOT reached - PathTodo = ${PathTodo} vs. $Plan") color red			 
			[#   var PathDone = Plan.substring(0, Plan.lastIndexOf(PathTodo))
				 if( PathDone == "" ) PathDone ="n"				 
				 else planner.doPathOnMap(PathDone)
			#]
			updateResource [# planner.robotOnMap() #]
			println("uuu ${PathDone}") 
			//[# planner.doPathOnMap(PathDone) #]
			[# planner.showCurrentRobotState(); #]
			replyTo moverobot with moverobotfailed : moverobotfailed($PathDone,$PathTodo)
		}
	}
	Goto waitclientrequest
	//Goto endofwork
	

	
}

/*
 * ------------------------------
 * robotposclient (tester)
 * ------------------------------
 */
  /* 
QActor robotposclient context ctxbasicrobot{
	
	State ss0 initial{
		request basicrobot -m engage : engage( worker )
	}
	Transition t0 whenReply engagedone    -> gototarget
	              whenReply engagerefused -> waitrobotfree
	
	State waitrobotfree{
		println("$name | Sorry, the robot is already engaged.") 
	}		
	 
	State gototarget {
		//[# CommUtils.waitTheUser("$name | hit 1CR") #] //blocca anche basicrobot ...
		delay 1000
		request basicrobot -m moverobot : moverobot(2,2)   
		//[# emitWithDelay("alarm","alarm(fire)", 1400)   #] 
	}
	Transition t0 whenReply moverobotdone   -> handleAnswer
	              whenReply moverobotfailed -> handleAnswer
	
	State handleAnswer{
		printCurrentMessage color magenta
		[# CommUtils.waitTheUser("$name | hit 1CR") #]
		request basicrobot -m moverobot : moverobot(6,4)   
	}
}
*/

/*
 * ------------------------------
 * basicrobotusage (tester)
 * ------------------------------
 */
/*  
QActor basicrobotusage context ctxbasicrobot{
	[# val Plan    = "\"[w, w, l, w, w, w, w]\"" //Come quello restituito da doplan
		val MyName = name 
	#] 
	State ss0 initial { 	
		printCurrentMessage color black
		//delay 1000
		//[# CommUtils.waitTheUser("basicrobotusage, please hit 1CR")	 #]
		request basicrobot -m engage : engage( MyName )
	}
	//Transition t0 whenReply engagedone -> dowork
	Transition t0 whenReply engagedone -> testdoplan
	
 	
	State dowork{
		//forward basicrobot -m cmd : cmd(p)
		request basicrobot -m step : step(350) 
	}
	Transition t0 whenReply stepdone   -> handleStepDone
	              whenReply stepfailed -> handleStepFail
	
	State handleStepDone{
		printCurrentMessage color black
	}
	Goto dowork
	
	State handleStepFail{
		printCurrentMessage color black
	}
	
//Testdopoath	
	State testdoplan{
		request basicrobot -m doplan : doplan($Plan,$MyName,345)
	}
	Transition t0 whenReply doplandone   -> testdoplanEnd
				  whenReply doplanfailed -> testdoplanEnd
	State testdoplanEnd{
		printCurrentMessage color magenta
		forward basicrobot -m disengage :  disengage($MyName)
	}	
}
 */